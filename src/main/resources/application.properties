spring.mvc.view.prefix=/views/
spring.mvc.view.suffix=.jsp

art.rowCount=2
art.colCount=4
# Ah HAH. My resource loading et cet seems to have been lousy because of how Maven mapped files into the WAR. /art not mapped, /images mapped, /images/art mapped. Leads to difference between local and Amazon behavior.
# The path, in a source folder, from which art resources should be pulled. -This value must be /resources/static/images or a subfolder-; Maven currently doesn't map anything outside of /images into /images when building a WAR. 


# I've had trouble remembering from whence to pull resources; use this property while fetching resources to restrict which resources get loaded.
resource.sourceFolder=WEB-INF/classes/static
# Note: If the previous Maven clean + install has completed, then WEB-INF/classes/static will be present in /target in source, and present as itself in the WAR. But if the build failed after a clean, then it won't be present.
# Working in dev, src/main/resources/static is the 'raw' set of files. For testing--where the previous clean/ often succeeds with the install failing--use this location.
testing.resource.sourceFolder = src/main/resources/static



# The subdirectory for art-page resources within resource.sourceFolder.
# Since this path will be combined with the resource path, it should start with '/'.
art.resource.subfolder=/images/art
# The path, somewhere under the root of the WAR or JAR, relative to which images' stored paths should be formatted. This will be used by the pages running from the container to fetch resources.
art.outputPath=images/art/
# Art filetypes to include
art.filetypes=.jpeg,.jpg,.png

spring.config.import=configuration-evaluation-report.properties,no-DB-autoconfiguration.properties